- name: "Create needed directories {{ code_dir }}"
  file:
      path: "{{ item }}"
      state: directory
  loop:
      - "/var/log/{{ project }}"


- name: "Checkout the code"
  git:
    repo: "{{ repository }}"
    dest: "{{ code_dir }}"
    version: "{% if force_deploy is defined %}{{ force_deploy }}{% else %}{{ deployment_version }}{% endif %}"
    update: yes
    # force=yes will discard any changes in working directory
    # force: yes




- name: "Check if database has been created previously"
  stat:
      path: "{{ code_dir }}/database.lock"
  register: db_created


- name: "Create database"
  shell: >
      echo "
        CREATE DATABASE {{ project }};
        CREATE USER {{ project }} WITH password '{{ django_database_password | mandatory }}';
        GRANT ALL PRIVILEGES ON DATABASE {{ project }} to {{ project }};
      " | docker exec -i postgres-{{ postgres_version | mandatory }} psql -U postgres
  when: not db_created.stat.exists

- name: "Create database extensions"
  shell: >
    echo "
      CREATE EXTENSION IF NOT EXISTS citext;
    " | docker exec -i postgres-{{ postgres_version | mandatory }} psql -U postgres -d {{ project }}
  when: not db_created.stat.exists


- name: "Create db creation lockfile"
  file:
      path: "{{ code_dir }}/database.lock"
      state: touch
  when: not db_created.stat.exists


- name: "Install/update .env file"
  template:
      src: environment
      dest: "{{ code_dir }}/.env"
      mode: 0600
      backup: yes
  tags:
    - env


- name: "Create logrotate.conf file"
  template:
      src: "logrotate.conf"
      dest: "/etc/logrotate.d/{{ project }}"


- name: "Ensure docker networks exist"
  docker_network:
      name: "{{ item }}"
  loop:
      - "{{ project }}_default"
      - "{{ project }}_nginx"
      - "{{ project }}_postgres"


- name: "Attach shared containers to project specific networks"
  shell:
      cmd: >-
        docker inspect {{ item.container }}
        {% raw %}--format='{{range $k,$v := .NetworkSettings.Networks}}{{println $k}}{{end}}'{% endraw %}
        | grep {{ item.name }}
        || docker network connect {{ item.name }} {{ item.container }}
  loop:
      - name: "{{ project }}_nginx"
        container: nginx
      - name: "{{ project }}_postgres"
        container: "postgres-{{ postgres_version }}"


- name: "Build the project"
  shell:
    cmd: >-
      docker-compose
           -f {{ compose_file }}
      up --build --detach --no-color --force-recreate --remove-orphans
    chdir: "{{ code_dir }}"
  register: result


# Print the build output
- debug:
    var: result


- name: "Run migrations"
  import_tasks: ../../helpers/run-management-command.yml
  vars:
    command_params: "migrate --noinput"



- name: "Run export assets"
  command: "docker-compose -f {{ compose_file }} run --rm node yarn export-assets"
  args:
      chdir: "{{ code_dir }}"


- name: "Run collectstatic"
  import_tasks: ../../helpers/run-management-command.yml
  vars:
    command_params: "collectstatic --noinput --ignore styles-src"


- name: "Run system checks"
  import_tasks: ../../helpers/run-management-command.yml
  vars:
    command_params: "check --deploy"


- name: "Set up shared nginx files"
  import_tasks: nginx_shared.yml


- name: "Set up certificates"
  import_tasks: letsencrypt.yml


- name: "Update nginx config"
  import_tasks: nginx.yml
  tags:
    - nginx
